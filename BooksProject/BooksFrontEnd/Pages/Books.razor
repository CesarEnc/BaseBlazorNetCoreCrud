@page "/Books"

@using BooksFrontEnd.Services
@using Models 
@using Modals
@inject BooksService BookService

<style>
    tbody tr:hover {
        background-color: lavender;
    }
</style>
<h1>List of Books</h1>


        <p>This component demonstrates fetching data from a service.</p>
        <button type="button" class="btn btn-success" style="justify-content: center;align-items:center;">Create new Book</button>



@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Publish Date</th>
                <th>Title</th>
                <th>Page Count</th>
            </tr>
        </thead>
        <!-- Implement Details as DoubleClick-->
        <tbody>
            @foreach (var book in books)
            {
                <tr>
                    <td>
                        @book.publishDate.ToShortDateString()
                    </td>
                    <td>@book.title</td>
                    <td>@book.pageCount </td>
                    <td>
                        <button type="button" class="btn btn-info">Update</button>
                        <button type="button" class="btn btn-danger" @onclick="() => OpenDeleteDialog(book)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (ShowDeleteDialog)
{
    <BooksFrontEnd.Modals.DesicionDialog DialogType="DesicionDialog.ModalDialogType.DeleteCancel" Title="Warning" Text="Are you sure you want to delete this book?" OnClose="CloseDeleteDialog"></BooksFrontEnd.Modals.DesicionDialog>
}

@if (ShowSucessDialog)
{
    <BooksFrontEnd.Modals.DesicionDialog DialogType="DesicionDialog.ModalDialogType.Ok" Title="Sucess" Text="Action Sucessfully Completed" OnClose="CloseSucessDialog"></BooksFrontEnd.Modals.DesicionDialog>

}

@code {
    private IEnumerable<Book> books;
    private Book _currentBook;
    protected override async Task OnInitializedAsync()
    {
        books = await BookService.GetAll();
    }

    public bool ShowDeleteDialog { get; set; }
    public bool ShowSucessDialog { get; set; }
    private void OpenSucessDialog()
    {
        ShowSucessDialog = true;
        StateHasChanged();
    }

    private void CloseSucessDialog()
    {
        ShowSucessDialog = false;
        StateHasChanged();
    }


    private async void CloseDeleteDialog(bool accepted)
    {
        if (accepted)
        {
            await BookService.Delete(_currentBook.id);
            OpenSucessDialog();
        }

        ShowDeleteDialog = false;
        _currentBook = null;
        StateHasChanged();
    }

    private void OpenDeleteDialog(Book book)
    {
        _currentBook = book;
        ShowDeleteDialog = true;
        StateHasChanged();
    }

}
